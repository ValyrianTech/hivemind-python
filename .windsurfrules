# Project
Hivemind-python is a python package implementing the Hivemind Protocol, a Condorcet-style Ranked Choice Voting System that stores all data on IPFS.

# Requirements
ipfs-dict-chain >= 1.0.9
pytest >= 7.0.0
pytest-cov >= 4.0.0

# development_rules:
  - All tests must pass before pushing changes
  - Use package-relative imports
  - Maintain Python 3.10 compatibility
  - Follow existing code style and patterns (PEP 8)
  - Use type hints and annotations
  - Use Sphinx for documentation
  - Update README.md as needed
  - Use a testdriven development (TDD) approach
  - Use the following command to run tests: python -m pytest
  - Always use 'python -m' versions of commands where possible
  - When tests fail, you should never change the original code without my permission, only change the test code itself.
  - Use PowerShell syntax for your commands, like using ; instead of &&

# Project Structure
/
  - LICENSE: Software license terms and conditions
  - README.md: Project overview, installation and usage instructions
  - pytest.ini: Configuration file for pytest testing framework
  - requirements.txt: List of Python package dependencies
  - setup.py: Package installation and distribution configuration

/diagrams/
  - class_diagram.md: UML class diagram showing system architecture
  - component_diagram.md: System component relationships and interactions
  - state_diagram.md: State transitions in the voting system
  - voting_sequence.md: Sequence diagram of the voting process

/docs/
  /source/
    - conf.py: Sphinx documentation configuration
    - index.rst: Main documentation landing page
    /modules/
      - issue.rst: Documentation for voting issues module
      - opinion.rst: Documentation for voter opinions module
      - option.rst: Documentation for voting options module
      - ranking.rst: Documentation for ranking algorithms
      - state.rst: Documentation for system state management
      - validators.rst: Documentation for input validation utilities

/src/hivemind/
  - __init__.py: Package initialization and public API exports
  - issue.py: Implementation of voting issues and questions
  - opinion.py: Handling of voter opinions and preferences
  - option.py: Management of voting options and choices
  - ranking.py: Condorcet-style ranking algorithm implementation
  - state.py: IPFS-based state management system
  - validators.py: Input validation and data verification

/tests/
  - conftest.py: Pytest fixtures and shared test configurations
  - test_ipfs.py: Tests for IPFS integration functionality
  - test_issue.py: Tests for voting issues implementation
  - test_opinion.py: Tests for opinion handling
  - test_option.py: Tests for voting options management
  - test_ranking.py: Tests for ranking algorithm
  - test_state.py: Tests for state management system